name: "chore: Automatic Scheduled Updates"

on:
  schedule:
    - cron: '0 0 * * 0'
  workflow_dispatch:

jobs:
  update:
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.branch.outputs.branch }}
      update_available: ${{ steps.changes.outputs.update_available }}
    steps:
      - name: Set swap space
        uses: pierotofy/set-swap-space@v1.0
        with:
          swap-size-gb: 10
      - name: Checkout repository
        uses: actions/checkout@v3.4.0
        with:
          fetch-depth: 0
      - name: Install nix
        uses: cachix/install-nix-action@v20
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            accept-flake-config = true
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
            auto-optimise-store = true
      - name: Set branch name output
        id: branch
        run: echo "branch=ci/automatic-update-$(date '+%F-%H-%M-%S')" >> $GITHUB_OUTPUT
      - name: Create branch locally
        run: git switch -c ${{ steps.branch.outputs.branch }}
      - name: Setup git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
      - name: Update flake.lock
        run: |
          nix \
            --log-format bar-with-logs \
            --option keep-going true \
            --show-trace \
            commit-lockfile-summary "chore(flake.lock): Update `inputs`" \
            flake update \
            --commit-lock-file
      - name: Update private packages
        run: |
          nix \
            --log-format bar-with-logs \
            --option keep-going true \
            --show-trace \
            develop -c nvfetcher

  merge:
    runs-on: ubuntu-latest
    needs:
      - update
    steps:
      - name: Set swap space
        uses: pierotofy/set-swap-space@v1.0
        with:
          swap-size-gb: 10
      - name: Checkout repository
        uses: actions/checkout@v3.4.0
        with:
          fetch-depth: 0
      - name: Check if update branch is behind main
        run: git diff origin/${{ needs.update.outputs.branch }}...origin/main --exit-code
      - name: Merge update into main
        run: git merge origin/${{ needs.update.outputs.branch }}
      - name: Push main
        run: git push origin main
      - name: Delete update branch
        run: git push --delete origin ${{ needs.update.outputs.branch }}
      - name: Check for changes
        id: changes
        run: |
          if git diff --exit-code origin/main...; then
            echo "update_available=false" >> $GITHUB_OUTPUT
          else
            echo "update_available=true" >> $GITHUB_OUTPUT
          fi
      - name: Push changes
        if: steps.changes.outputs.update_available == 'true'
        run: git push --force origin ${{ steps.branch.outputs.branch }}
