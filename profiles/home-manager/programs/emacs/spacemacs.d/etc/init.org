#+TITLE: xxx's emacs config
#+AUTHOR: xxx, xxx <xxx>
#+email: xxx at gmail.com
#+DESCRIPTION: A literate programming style exposition of my Emacs configuration
#+LANGUAGE: en
#+STARTUP: overview indent align
#+BABEL: :cache yes
#+OPTIONS: ^:nil num:nil tags:nil
#+SETUPFILE: etc/readtheorg.setup

# Badge
[[http://www.gnu.org/licenses/gpl-3.0.txt][https://img.shields.io/badge/license-GPL_3-green.svg?dummy]]
[[https://travis-ci.org/coldnew/coldnew-emacs][https://travis-ci.org/coldnew/coldnew-emacs.svg?branch=master]]

* Introduction

This is my emacs configuration, you can find it on [[https://github.com/coldnew][GitHub]] or read in [[http://coldnew.github.io/coldnew-emacs][HTML]] or [[https://coldnew.github.io/coldnew-emacs/init.el.html][init.el]] directly.

** Install emacs

My emacs is running under =Mac OSX= and =Arch Linux= and I really like them,
following are some record for how I installed my emacs.

*** Mac OSX

In Mac OSX, I use [[http://brew.sh/][homebrew]] to maintain opensource packages, I always install latest
version of emacs via following command

#+BEGIN_SRC sh :tangle no
  # change --HEAD to --devel for current development version
  brew install emacs --HEAD --use-git-head --with-cocoa --with-gnutls --with-rsvg --with-imagemagick
  brew linkapps
#+END_SRC

*** Arch Linux

[[https://www.archlinux.org/][Arch Linux]] is the best linux distrobution I ever used and it's really easy to install latest apps.

#+BEGIN_SRC sh :tangle no
  USE="X gtk3 inotify xft imagemagick" pacman -S emacs
#+END_SRC

** Install or testing this config

- First use git to download whole repo

  : git clone https://github.com/coldnew/coldnew-emacs.git

- Then use git submodule to download the spacemacs

  : git submodule init
  : git submodule update

- You also need to install [[https://github.com/cask/cask][Cask]] for package management

  : curl -fsSL https://raw.githubusercontent.com/cask/cask/master/go | python

- Then use the =make= command bootstrap this config

  : make bootstrap

- If you only want to generate the =init.el=, jut type

  : make init.el

- If you do not put this repo on =~/.emacs.d=, you need to use following
  command to start emacs

  : emacs -q -l ~/xxx-emacs/init.el

** Packages need to install in system (Optional)

Some extra packages need to be installed in the system manually. These packages
are =optional= but can make this configuration work more nicely.

*** Mac OSX

#+BEGIN_SRC sh :tangle no :noweb yes
  brew install the_silver_searcher
  brew install aspell --with-lang-en
  <<install-in-macosx>>
#+END_SRC

*** Arch Linux

In Arch Linux, don't forget to enable ~USE=emacs~ to make Arch Linux auto install
emacs-related packages.

#+BEGIN_SRC sh :tangle no :noweb yes
  pacman -S the_silver_searcher
  pacman -S aspell
  <<install-in-archlinux>>
#+END_SRC

*** All platform

Some package like =npm= use the same rule to install in any platform, here list what I need to install.

#+BEGIN_SRC sh :tangle no :noweb yes
  <<install-in-all>>
#+END_SRC

* Initialization Emacs

There are some configurations I need to put at the beginning of the emacs
config. These configurations are derived from my original init.el file.

** Use lexical binding

For some of my functions, and general coolness, =lexical binding= is a must.
Without it, closures cannot be made for example.

This line needs to appear at the beginning of the file to work. Just to keep
things looking nice I put it at the beginning of the file.

#+BEGIN_SRC emacs-lisp :padline no
  ;; -*- lexical-binding: t -*-
#+END_SRC

** Prevent load outdated .elc files

Since emacs 24.4, new option =load-prefer-newer= has been introduce, which make
me never accidentally using outdated compiled files.

#+BEGIN_SRC emacs-lisp
  (setq load-prefer-newer t)
#+END_SRC

** Setup user-cache-directory variable

Setup the cache directory to store some cache content.

#+BEGIN_SRC emacs-lisp
  (defconst user-cache-directory
    (file-name-as-directory (concat user-emacs-directory ".cache"))
    "My emacs storage area for persistent files.")
  ;; create the `user-cache-directory' if not exists
  (make-directory user-cache-directory t)
#+END_SRC

* Package Management                                               :packages:

The main package magement in my emacs is [[https://github.com/cask/cask][Cask]], which is a really nice package
like npm, cargo ...etc.

[[https://github.com/cask/cask][Cask]] can also install packages according to your emacs version, so you don't be
afraid to get version conflicts after upgrade emacs.

Take my emacs as example, after initialize [[https://github.com/cask/cask][Cask]], all package install by
=package.el= just save to =.cask= folder according to your emacs version.

#+BEGIN_EXAMPLE
  coldnew@Sara ~/.emacs.d $ tree -L 1 .cask/
  .cask/
  ├── 24.5.1
  ├── 25.0.50.1
  └── 25.1.50.1

  3 directories, 0 files
#+END_EXAMPLE

** Initialize package.el

Before we start this section, we need to initialize =package.el= first.

#+BEGIN_SRC emacs-lisp :tangle no
  ;; This must come before configurations of installed packages.
  ;; Don't delete this line. If you don't want it, just comment it out by adding a
  ;; semicolon to the start of the line. You may delete these explanatory
  ;; comments.
  (package-initialize)
#+END_SRC

Add [[http://melpa.org][melpa]] to package list.

#+BEGIN_SRC emacs-lisp :tangle no
  (setq package-archives '(("gnu"   . "https://elpa.emacs-china.org/gnu/")
                           ("melpa" . "https://elpa.emacs-china.org/melpa/")
                           ("org"   . "https://elpa.emacs-china.org/org/")))
#+END_SRC

** Cask and Pallet

[[https://github.com/rdallasgray/pallet][Pallet]] is a wonderful little tool built on [[https://github.com/cask/cask][Cask]], a dependency management tool
for Emacs packages. Pallet adds automatic updating of the =Caskfile= when
packages are installed and deleted.

*** Installing Cask

Just run this command in your terminal of choice:

#+BEGIN_SRC sh :tangle no
  curl -fsSkL https://raw.github.com/cask/cask/master/go | python
#+END_SRC

then add =~/.cask/bin= to your =PATH= so that you can use =cask=.

*** Creating a Caskfile                                          :caskfile:

For now, we just need a minimal =Cask= to get Pallet set up. Mine
looks like this:

#+BEGIN_SRC emacs-lisp :tangle (if (file-exists-p "Cask") "no" "Cask")
  (source "gnu"   "https://elpa.emacs-china.org/gnu/")
  (source "melpa" "https://elpa.emacs-china.org/melpa/")
  (source "org"   "https://elpa.emacs-china.org/org/")

  (depends-on "f")
  (depends-on "s")
  (depends-on "dash")
  (depends-on "pallet")
  (depends-on "async")
  (depends-on "use-package")
  (depends-on "quelpa")
  (depends-on "org")
  (depends-on "htmlize")
#+END_SRC

Then run the following command in your =.emacs.d= directory to set up
[[https://github.com/rdallasgray/pallet][Pallet]].

#+BEGIN_SRC sh :tangle no
  cask install
#+END_SRC

Since the =Cask= file is just emacs-lisp file, add it to mode-alist.

#+BEGIN_SRC emacs-lisp :tangle no
  (add-to-list 'auto-mode-alist '("Cask$" . emacs-lisp-mode))
#+END_SRC

*** Initialize Cask

Finally, we add the following lines to our init file:

#+BEGIN_SRC emacs-lisp
  ;; (use-package cask
  ;;   :load-path "~/.cask/cask.el"
  ;;   :config
  ;;   (cask-initialize)
  ;;   )
  (require 'cask "~/.cask/cask.el")
  (cask-initialize)
#+END_SRC

*** Initialize Pallet

Since we already install pallet via cask, we just need to use the following code
to initialize pallet.

#+BEGIN_SRC emacs-lisp
  ;; (use-package pallet
  ;;   :config
  ;;   (pallet-mode t)
  ;;   )
  (require 'pallet)
  (pallet-mode t)
#+END_SRC

** use-package

The =use-package= macro allows you to isolate package configuration in your =.emacs=
file in a way that is both performance-oriented and, well, tidy. I created it
because I have over 80 packages that I use in Emacs, and things were getting
difficult to manage. Yet with this utility my total load time is around 2
seconds, with no loss of functionality!

GitHub: https://github.com/jwiegley/use-package

#+BEGIN_SRC emacs-lisp
  ;; Installed by Cask
  (require 'use-package)
  ;; Auto install non-installed packages.
  ;; (setq use-package-always-ensure t)
#+END_SRC

* Load Path

The variable =load-path= lists all the directories where Emacs should look for
Elisp files.

Though I use =Cask= as package management in my emacs, some local packages like
my own theme or others can't fetch by elpa need to add to load-path, this will
help emacs find them.

Following are my method to add directories to load-path ~recursively~, this
function also create directory to prevent directory not exist.

If you don't have any local elisp and all packages is maintain by cask or elpa or
spacemacs, you can skip following code.

#+BEGIN_SRC emacs-lisp :tangle no
  ;; Add directories to emacs's `load-path' recursively.
  ;; if path does not exist, create directory.
  (let* ((lisp-dir '("lisp/" "site-lisp/")))
    (dolist (lisp-path lisp-dir)
      (when (not (file-exists-p lisp-path))
        (make-directory (concat user-emacs-directory lisp-path) t))
      (let* ((load-dir (concat user-emacs-directory lisp-path))
             (default-directory load-dir))
        (setq load-path
              (append
               (let ((load-path (copy-sequence load-path)))
                 (append
                  (copy-sequence (normal-top-level-add-to-load-path '(".")))
                  (normal-top-level-add-subdirs-to-load-path)))
               load-path)))))
#+END_SRC

* Spacemacs

  [[https://github.com/syl20bnr/spacemacs][Spacemacs]] is an emacs starterkit focus on [[https://gitorious.org/evil/pages/Home][Evil]], which emulate vim keymap on
  Emacs.

  I make my emacs on top of spacemacs since I also use vim keymap.

  In my config file, the original =~/.spacemacs= file has moved to
  =~/.emacs.d/spacemacs.d/init.el= , I also advice spacemacs funtion to
  prevent orphan packages deleted by spacemacs.

  After all spacemacs init done, switch back to =*scratch*= buffer.

** Load basic spacemacs configuration file

   Latest spacemacs can setup =SPACEMACSDIR= to load customize spacemacs init.el
   file.

   #+BEGIN_SRC emacs-lisp
     (setq spacemacs-start-directory
           (file-name-as-directory (concat user-emacs-directory "spacemacs")))
     (setenv "SPACEMACSDIR"
             (file-name-as-directory (concat user-emacs-directory "spacemacs.d")))
   #+END_SRC

** Overwrite spacemacs function to let it not remove my packages

   I use =Cask= to handle all packages, spacemacs should do nothing here.

   #+BEGIN_SRC emacs-lisp
     ;; Make spacemacs not remove my packages.
     (defadvice configuration-layer/delete-orphan-packages (around null-func activate)
       "Overwrite the spacemacs's `configuration-layer/delete-orphan-packages'
       to make it not remove any orphan packages.")
   #+END_SRC

** Spacemacs no need to check newer version

   Since my spacemacs is installed as submodule, it's no need to check for newer
   version, I'll handle this myself.

   #+BEGIN_SRC emacs-lisp :tangle no
     (defadvice spacemacs/check-for-new-version (around null-func activate)
       "Overwrite the spacemacs's `spacemacs/check-for-new-version' to
       makt it useless since I use git submodule to bundle spacemacs with my emacs.")
   #+END_SRC

** Load spacemacs

   The original spacemacs is suggest to clone it to =~/.emacs.d=, I really not like
   this. Instead, I move it to =~/.emacs.d/spacemacs= so I can use org-mode
   with literature writing.

   #+BEGIN_SRC emacs-lisp
     ;; Make a fake entry point for spacemacs, also modify the
     ;; `user-emacs-directory' temporary to mislead spacemacs real emacs
     ;; directory.
     (let* ((spacemacs-init
             (concat (file-name-as-directory spacemacs-dir) "init.el"))
            (user-emacs-directory (file-name-directory spacemacs-init)))
       ;; Initial spacemacs, our emacs run on top of it
       (load spacemacs-init))
   #+END_SRC

** Save custom-file as cache

Most of my config is written in this file, it's no need to tracking the emacs's
custom-setting.

I move the file to cache-dir and make git ignore it.

#+BEGIN_SRC emacs-lisp :tangle no
  (setq-default custom-file (concat user-cache-directory "custom.el"))
  ;; load custom-file only when file exist
  (when (file-exists-p custom-file)
    (load-file custom-file))
#+END_SRC

** Async rebuild init.el after save

#+BEGIN_SRC emacs-lisp
  ;; Installed by Cask
  (use-package async
    :config
    (progn
      ;; If I'm edit my init.org, async generate init.el when save.
      (defun tangle-init ()
        "If the current buffer is 'init.org' the code-blocks are tangled."
        (let ((buffer-name "async-make-init.el"))
          (when (equal (buffer-file-name)
                       (expand-file-name (concat user-emacs-directory "init.org")))
            ;; If previous building buffer exist, discard it
            ;; (when (get-buffer (concat "*" buffer-name "*"))
            ;;   (kill-buffer (concat "*" buffer-name "*")))
            ;; build with `make init.el' command
            (async-start-process buffer-name "make"
                                 '(lambda (result)
                                    (message "Re-Generate init.el")) "init.el"))))
      ;; Add to hook
      (add-hook 'after-save-hook 'tangle-init)
      )
    )
#+END_SRC

* Reference

Following link is refrence for my emacs config.

~[01]~ https://github.com/r0man/.emacs.d/blob/master/init.el.org

~[02]~ https://github.com/bodil/emacs.d

~[03]~ https://github.com/mgalgs/.emacs.d

~[04]~ https://raw.githubusercontent.com/sbisaacson/literate-emacs/master/README.org

~[05]~ https://github.com/jhenahan/emacs.d/blob/master/emacs-init.org

~[06]~ https://ryuslash.org/dotfiles/emacs/init.html

~[07]~ http://www.wisdomandwonder.com/wordpress/wp-content/uploads/2014/03/C3F.org_.txt

~[08]~ https://github.com/howardabrams/dot-files

~[09]~ https://github.com/larstvei/dot-emacs/blob/master/init.org

~[10]~ https://gitlab.com/romo/emacs.d/raw/master/emacs.org

~[11]~ https://github.com/bixuanzju/emacs.d/blob/master/emacs-init.org

~[12]~ [[https://github.com/cheunghy/emacs-easy-ide]]

~[13]~ https://github.com/tsu-nera/dotfiles/tree/master/.emacs.d/inits

~[14]~ https://github.com/aaronbieber/dotfiles/tree/master/configs/emacs.d/lisp

~[15]~ https://github.com/howardabrams/dot-files

~[16]~ [[https://github.com/xiaohanyu/oh-my-emacs/]]

~[17]~ https://github.com/jouyouyun/emacs.d/tree/master
